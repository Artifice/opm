stages:
  - install-environment
  - build
  - test
  - deploy

install-go:
  stage: install-environment
  script:
    - export CURRENT_BUILD_PATH=$(pwd)
    - echo $PATH
    - rm -rf $HOME/golang
    - rm -rf $HOME/gopath
    - mkdir -p $HOME/golang # for GOROOT (contains the Go binary & core packages)
    - mkdir -p $HOME/gopath # for GOPATH (contains code and external packages)
    - curl https://storage.googleapis.com/golang/go1.6.linux-amd64.tar.gz 2>/dev/null > go1.6.linux-amd64.tar.gz
    - tar -C $HOME/golang -xzf go1.6.linux-amd64.tar.gz
    - export GOROOT=$HOME/golang/go
    - export GOPATH=$HOME/gopath
    - export PATH=$PATH:$GOROOT/bin
    - export PATH=$PATH:$GOPATH/bin
    - go version
    - echo $PATH
    - go env
    - which go

build:
  stage: build
  script:
    - $CURRENT_BUILD_PATH/buildscripts/linux/install.sh
    - $CURRENT_BUILD_PATH/buildscripts/linux/testbuild.sh

test:
  stage: test
  script:
    - cd $CURRENT_BUILD_PATH
    - go test

deploy:
  stage: deploy
  script:
  - cd $GOPATH/bin
  - gsutil -m rsync -rdx "\..*" ./ gs://opm-binaries/
  - ssh opm-apiserver-2 -i ~/.ssh/google_compute_engine "sudo gsutil -m rsync -rd gs://opm-gitlabrunner/ /go/"
  - ssh opm-scanner-2 -i ~/.ssh/google_compute_engine "sudo gsutil -m rsync -rd gs://opm-gitlabrunner/ /go/"
  - ssh opm-proxyhub-2 -i ~/.ssh/google_compute_engine "sudo gsutil -m rsync -rd gs://opm-gitlabrunner/ /go/"
  - ssh opm-apiserver-2 -i ~/.ssh/google_compute_engine "sudo systemctl restart apiserver"
  - ssh opm-scanner-2 -i ~/.ssh/google_compute_engine "sudo systemctl restart scanner"
  - ssh opm-proxyhub-2 -i ~/.ssh/google_compute_engine "sudo systemctl restart proxyhub"
  only:
  - develop
  tags:
  - gce
